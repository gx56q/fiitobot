using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.InlineQueryResults;
using Telegram.Bot.Types.InputFiles;
using Telegram.Bot.Types.ReplyMarkups;

namespace fiitobot.Services
{
    public interface IPresenter
    {
        Task Say(string text, long chatId);
        Task ShowContact(Contact contact, long chatId, AccessRight right);
        Task ShowPhoto(Contact contact, PersonPhoto photo, long chatId, AccessRight right);
        Task ShowOtherResults(Contact[] otherContacts, long chatId);
        Task SayNoResults(long chatId);
        Task SayNoRights(long chatId, AccessRight userAccessRights);
        Task SayBeMoreSpecific(long chatId);
        Task InlineSearchResults(string inlineQueryId, Contact[] foundContacts, AccessRight right);
        Task ShowDetails(PersonData person, string[] sources, long fromChatId);
        Task SayReloadStarted(long chatId);
        Task SayReloaded(int contactsCount, long chatId);
        Task ShowErrorToDevops(Update incomingUpdate, string errorMessage);
        Task ShowHelp(long fromChatId, AccessRight right);
        Task ShowContactsBy(string criteria, IList<Contact> people, long chatId, AccessRight accessRight);
    }

    public class Presenter : IPresenter
    {
        private readonly ITelegramBotClient botClient;
        private readonly long devopsChatId;
        private readonly string spreadsheetId;

        public Presenter(ITelegramBotClient botClient, long devopsChatId, string spreadsheetId)
        {
            this.botClient = botClient;
            this.devopsChatId = devopsChatId;
            this.spreadsheetId = spreadsheetId;
        }

        public async Task InlineSearchResults(string inlineQueryId, Contact[] foundContacts, AccessRight right)
        {
            var results = foundContacts.Select(c =>
                new InlineQueryResultArticle(c.GetHashCode().ToString(), $"{c.LastName} {c.FirstName} {c.FormatMnemonicGroup(DateTime.Now)} {c.Telegram}",
                    new InputTextMessageContent(FormatContactAsHtml(c, right))
                    {
                        ParseMode = ParseMode.Html
                    }));
            await botClient.AnswerInlineQueryAsync(inlineQueryId, results, 60);
        }

        public async Task ShowDetails(PersonData person, string[] sources, long chatId)
        {
            var text = new StringBuilder();
            var contact = person.Contact;
            text.AppendLine(
                $@"<b>{contact.LastName} {contact.FirstName} {contact.Patronymic}</b> {contact.FormatMnemonicGroup(DateTime.Now)} (–≥–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {contact.AdmissionYear})");
            text.AppendLine();
            foreach (var rubric in person.Details.GroupBy(d => d.Rubric))
            {
                var sourceId = rubric.First().SourceId;
                var url = sources[sourceId];
                text.AppendLine(
                    $"<b>{EscapeForHtml(rubric.Key)}</b> (<a href=\"{url}\">–∏—Å—Ç–æ—á–Ω–∏–∫</a>)");
                foreach (var detail in rubric)
                    text.AppendLine($" ‚Ä¢ {EscapeForHtml(detail.Parameter.TrimEnd('?'))}: {EscapeForHtml(detail.Value)}");
                text.AppendLine();
            }
            await botClient.SendTextMessageAsync(chatId, text.ToString().TrimEnd(), ParseMode.Html);
        }

        public async Task SayReloadStarted(long chatId)
        {
            await botClient.SendTextMessageAsync(chatId, $"–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –≥—É–≥–ª—Ç–∞–±–ª–∏—Ü. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É-–¥—Ä—É–≥—É—é.", ParseMode.Html);
        }

        public async Task SayReloaded(int contactsCount, long chatId)
        {
            await botClient.SendTextMessageAsync(chatId, $"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {contactsCount.Pluralize("–∫–æ–Ω—Ç–∞–∫—Ç|–∫–æ–Ω—Ç–∞–∫—Ç–∞|–∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")}", ParseMode.Html);
        }

        public async Task ShowErrorToDevops(Update incomingUpdate, string errorMessage)
        {
            await botClient.SendTextMessageAsync(devopsChatId, FormatErrorHtml(incomingUpdate, errorMessage),
                ParseMode.Html);
        }

        public Task ShowHelp(long fromChatId)
        {
            throw new NotImplementedException();
        }

        public async Task ShowHelp(long fromChatId, AccessRight accessRight)
        {
            var spreadsheetUrl = $"https://docs.google.com/spreadsheets/d/{spreadsheetId}";
            var b = new StringBuilder("–≠—Ç–æ –±–æ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –§–ò–ò–¢ –£—Ä–§–£. –ù–∞–ø–∏—à–∏ —Ñ–∞–º–∏–ª–∏—é –∏/–∏–ª–∏ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –§–ò–ò–¢ –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É –≤—Å—ë, —á—Ç–æ –æ –Ω—ë–º –∑–Ω–∞—é. –ù–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç—ã –∏–∑ –§–ò–ò–¢.");
            if (accessRight.IsOneOf(AccessRight.Admin))
                b.AppendLine(
                    "\n\n–í –ª—é–±–æ–º –¥—Ä—É–≥–æ–º —á–∞—Ç–µ –Ω–∞–ø–∏—à–∏ @fiitobot –∏ –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞ –Ω–∞—á–Ω–∏ –ø–∏—Å–∞—Ç—å —Ñ–∞–º–∏–ª–∏—é. –Ø –ø–æ–∫–∞–∂—É, –∫–æ–≥–æ —è –∑–Ω–∞—é —Å —Ç–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–µ–π, –∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞, –∑–∞–ø–æ—â—É –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —á–∞—Ç." +
                    $"\n\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ —è –±–µ—Ä—É –∏–∑ –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü—ã {spreadsheetUrl}");
            await botClient.SendTextMessageAsync(fromChatId, b.ToString(), ParseMode.Html);
        }

        private string FormatErrorHtml(Update incomingUpdate, string errorMessage)
        {
            var formattedUpdate = FormatIncomingUpdate(incomingUpdate);
            var formattedError = EscapeForHtml(errorMessage);
            return $"Error handling message: {formattedUpdate}\n\nError:\n<pre>{formattedError}</pre>";
        }

        public string FormatIncomingUpdate(Update incomingUpdate)
        {
            var incoming = incomingUpdate.Type switch
            {
                UpdateType.Message => $"From: {incomingUpdate.Message!.From} Message: {incomingUpdate.Message!.Text}",
                UpdateType.EditedMessage =>
                    $"From: {incomingUpdate.EditedMessage!.From} Edit: {incomingUpdate.EditedMessage!.Text}",
                UpdateType.InlineQuery =>
                    $"From: {incomingUpdate.InlineQuery!.From} Query: {incomingUpdate.InlineQuery!.Query}",
                UpdateType.CallbackQuery =>
                    $"From: {incomingUpdate.CallbackQuery!.From} Query: {incomingUpdate.CallbackQuery.Data}",
                _ => $"Message with type {incomingUpdate.Type}"
            };

            return
                $"<pre>{EscapeForHtml(incoming)}</pre>";
        }
        private string EscapeForHtml(string text)
        {
            return text
                .Replace("&", "&amp;")
                .Replace("<", "&lt;")
                .Replace(">", "&gt;");
        }

        public async Task ShowContact(Contact contact, long chatId, AccessRight right)
        {
            if (contact.Type == ContactType.Student)
            {
                var inlineKeyboardMarkup = right.IsOneOf(AccessRight.Admin, AccessRight.Staff)
                    ? new InlineKeyboardMarkup(new InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ!")
                        { CallbackData = $"–î–æ—Å—å–µ {contact.LastName} {contact.FirstName}" })
                    : null;
                var htmlText = FormatContactAsHtml(contact, right);
                await botClient.SendTextMessageAsync(chatId, htmlText, ParseMode.Html,
                    replyMarkup: inlineKeyboardMarkup);
            }
            else if (contact.Type == ContactType.Administration)
            {
                var htmlText = FormatContactAsHtml(contact, right);
                await botClient.SendTextMessageAsync(chatId, htmlText, ParseMode.Html);
            }
        }

        public async Task ShowPhoto(Contact contact, PersonPhoto photo, long chatId, AccessRight right)
        {
             await botClient.SendPhotoAsync(chatId, new InputOnlineFile(photo.RandomPhoto), caption: $"<a href='{photo.PhotosDirectory}'>{photo.DirName}</a>", parseMode:ParseMode.Html);
        }

        public async Task SayNoResults(long chatId)
        {
            var text = "–ù–µ –Ω–∞—à–ª–æ—Å—å –Ω–∏–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ :(\n\n–ù–µ —É–Ω—ã–≤–∞–π—Ç–µ! –ù–∞–π–¥–∏—Ç–µ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ /random! –ò–ª–∏ –ø–æ–∏—â–∏—Ç–µ –ø–æ —Å–≤–æ–µ–π —à–∫–æ–ª–µ –∏–ª–∏ –≥–æ—Ä–æ–¥—É!";
            await botClient.SendTextMessageAsync(chatId, text, ParseMode.Html);
        }

        public async Task SayBeMoreSpecific(long chatId)
        {
            await botClient.SendTextMessageAsync(chatId, $"–£—Ç–æ—á–Ω–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å", ParseMode.Html);
        }

        public async Task SayNoRights(long chatId, AccessRight userAccessRights)
        {
            if (userAccessRights == AccessRight.External)
                await botClient.SendTextMessageAsync(chatId, $"–≠—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –§–ò–ò–¢", ParseMode.Html);
            else
                await botClient.SendTextMessageAsync(chatId, $"–≠—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", ParseMode.Html);
        }

        public string FormatContactAsHtml(Contact contact, AccessRight right)
        {
            var b = new StringBuilder();
            b.AppendLine($"<b>{contact.LastName} {contact.FirstName} {contact.Patronymic}</b>");
            if (contact.Type == ContactType.Student)
            {
                b.AppendLine($"{contact.FormatMnemonicGroup(DateTime.Now)} (–≥–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {contact.AdmissionYear})");
                if (!string.IsNullOrWhiteSpace(contact.School))
                    b.AppendLine($"üè´ –®–∫–æ–ª–∞: {contact.School}");
                if (!string.IsNullOrWhiteSpace(contact.City))
                    b.AppendLine($"üèôÔ∏è –ì–æ—Ä–æ–¥: {contact.City}");
                if (right.IsOneOf(AccessRight.Admin, AccessRight.Staff))
                    b.AppendLine($"–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ {FormatConcurs(contact.Concurs)} c —Ä–µ–π—Ç–∏–Ω–≥–æ–º {contact.Rating}");
            }
            if (contact.Type == ContactType.Administration)
            {
                b.AppendLine($"–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è: {contact.Job}");
            }
            b.AppendLine();
            if (!string.IsNullOrWhiteSpace(contact.Email))
                b.AppendLine($"üìß {contact.Email}");
            if (!string.IsNullOrWhiteSpace(contact.Phone))
                b.AppendLine($"üìû {contact.Phone}");
            if (!string.IsNullOrWhiteSpace(contact.Telegram))
                b.AppendLine($"üí¨ {contact.Telegram}");
            b.AppendLine($"{EscapeForHtml(contact.Note)}");
            return b.ToString();
        }

        private string FormatConcurs(string concurs)
        {
            if (concurs == "–û") return "–ø–æ –æ–±—â–µ–º—É –∫–æ–Ω–∫—É—Ä—Å—É";
            else if (concurs == "–ë–≠") return "–ø–æ –æ–ª–∏–º–ø–∏–∞–¥–µ";
            else if (concurs == "–ö") return "–ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É";
            else if (concurs == "–ö–í") return "–ø–æ –ª—å–≥–æ—Ç–Ω–æ–π –∫–≤–æ—Ç–µ";
            else if (concurs == "–¶") return "–ø–æ —Ü–µ–ª–µ–≤–æ–π –∫–≤–æ—Ç–µ";
            else return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –∫–∞–∫ ü§∑‚Äç";
        }

        public async Task ShowContactsBy(string criteria, IList<Contact> people, long chatId, AccessRight accessRight)
        {
            people = people.OrderByDescending(p => p.AdmissionYear).ThenBy(p => p.LastName).ThenBy(p => p.FirstName).ToList();
            var listCount = people.Count > 20 ? 15 : people.Count;
            var list = string.Join("\n", people.Select(p => $"<b>{p.LastName} {p.FirstName}</b> {p.FormatMnemonicGroup(DateTime.Now)} {p.Telegram}").Take(20));
            var ending = listCount < people.Count ? $"\n\n–ï—Å—Ç—å –µ—â—ë {people.Count - listCount} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–µ–ª–æ–≤–µ–∫" : "";
            await botClient.SendTextMessageAsync(chatId, $"{criteria}:\n\n{list}{ending}", ParseMode.Html);
        }

        public async Task ShowOtherResults(Contact[] otherContacts, long chatId)
        {
            await ShowContactsBy("–ï—â—ë —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", otherContacts, chatId, AccessRight.Student);
        }

        public async Task Say(string text, long chatId)
        {
            await botClient.SendTextMessageAsync(chatId, text, ParseMode.Html);
        }
    }
}
